<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>assembly - Tag - CUEH ComSec</title><link>https://cov-comsec.github.io/tags/assembly/</link><description>assembly - Tag - CUEH ComSec</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 20 Oct 2021 12:40:28 +0100</lastBuildDate><atom:link href="https://cov-comsec.github.io/tags/assembly/" rel="self" type="application/rss+xml"/><item><title>Assembly &amp; Shellcoding</title><link>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding/</link><pubDate>Wed, 20 Oct 2021 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding/</guid><description>This week Ben led a session on some basic assembly shellcoding. The first section of the session covered some foundational theory content on CPU architecture, registers, and memory. After this, assembly was introduced - we used x86_64 assembly with Intel syntax. In this article we will go through one method of solving each assembly challenge. The shellcode solutions will be released at a later date.
You can download the presentation here.</description></item></channel></rss>