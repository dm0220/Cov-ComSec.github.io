<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>pwn - Tag - CUEH ComSec</title><link>https://cov-comsec.github.io/tags/pwn/</link><description>pwn - Tag - CUEH ComSec</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 17 Feb 2022 08:40:28 +0100</lastBuildDate><atom:link href="https://cov-comsec.github.io/tags/pwn/" rel="self" type="application/rss+xml"/><item><title>Exploiting Race Conditions</title><link>https://cov-comsec.github.io/posts/2022_race_conditions/</link><pubDate>Thu, 17 Feb 2022 08:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2022_race_conditions/</guid><description>During this session we discussed the concept of race conditions in various forms, and how an attacker could exploit them. To recap, as race condition takes advantage of the fact that a system must execute a process in a specific sequence of steps, but due to the nature of modern systems there is an opportunity to alter the environment in which a process in run during this sequence of events. One common form of race condition is a Time-of-Check, Time-of-Use vulnerability (TOCTOU).</description></item><item><title>Walkthrough: Shellcoding Challenges</title><link>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding_walkthrough/</link><pubDate>Sun, 07 Nov 2021 10:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding_walkthrough/</guid><description>As promised by Ben in Assembly &amp;amp; Shellcoding, this article will cover the solutions for the Shellcode challenges. The challenges can be found on CTFd and is strongly recommended to try to solve the challenges on your own before continue reading this article!
Preparation for the challenges Each of the following challenges will require you to send your already assembled code to the target; whose ip address and port is specified in the description of each challenge on CTFd.</description></item><item><title>Introduction to Stack Smashing</title><link>https://cov-comsec.github.io/posts/2021_stack_smashing/</link><pubDate>Thu, 04 Nov 2021 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_stack_smashing/</guid><description>This week, Ben introduced the concept of stack smashing, demonstrating the most basic form of buffer overflow attacks, the stack smash.
Presentation slides here
The term stack smashing was first coined in the Phrack article Smashing the Stack for Fun and Profit. It is a term used to describe the technique of overflowing a buffer, writing shellcode onto the stack (and sometimes a NOP sled), and then overwriting the return address of a the stack frame with the address near the start of the payload.</description></item><item><title>Reverse Engineering Basics</title><link>https://cov-comsec.github.io/posts/2021_reverse_engineering/</link><pubDate>Thu, 28 Oct 2021 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_reverse_engineering/</guid><description>The session at ComSec this week went into some basic reverse engineering methods. Ben did a demo with some challenges, and then we released some CTF challenges to solve.
Credential Leak via Memory Inspection The first demo showed how we can use a decompiler to understand how a binary functions, and then use a debugger to inspect memory at runtime in order to find credentials. You can download the demo binary here.</description></item><item><title>Assembly &amp; Shellcoding</title><link>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding/</link><pubDate>Wed, 20 Oct 2021 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding/</guid><description>This week Ben led a session on some basic assembly shellcoding. The first section of the session covered some foundational theory content on CPU architecture, registers, and memory. After this, assembly was introduced - we used x86_64 assembly with Intel syntax. In this article we will go through one method of solving each assembly challenge. The shellcode solutions will be released at a later date.
You can download the presentation here.</description></item></channel></rss>